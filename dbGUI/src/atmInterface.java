
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.HashMap;
import java.util.Map;
import javax.swing.JButton;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author kenkh
 */
public class atmInterface extends javax.swing.JFrame {
    
    private final Bank bank;
    private Connection conn;
    private Map<Integer, Account> accounts;
    private String id;
    private Map<Integer, Integer> linked; 
    private String day;
    
    
    public atmInterface() {
        initComponents();
        this.bank=new Bank();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        PinField = new javax.swing.JPasswordField();
        jButton2 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        verify = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        depositButton = new javax.swing.JButton();
        topupButton = new javax.swing.JButton();
        withdrawButton = new javax.swing.JButton();
        purchaseButton = new javax.swing.JButton();
        transferButton = new javax.swing.JButton();
        collectButton = new javax.swing.JButton();
        wireButton = new javax.swing.JButton();
        payButton = new javax.swing.JButton();
        from = new javax.swing.JLabel();
        money = new javax.swing.JLabel();
        to = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        custName = new javax.swing.JLabel();
        status = new javax.swing.JLabel();
        fromAcc = new javax.swing.JComboBox<>();
        toAcc = new javax.swing.JTextField();
        amount = new javax.swing.JTextField();
        date = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("ATM \n");
        setMaximumSize(new java.awt.Dimension(2000, 1300));
        setMinimumSize(new java.awt.Dimension(700, 500));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("ENTER YOUR PIN");

        PinField.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jButton2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButton2.setText("ENTER");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButton1.setText("Back ");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        verify.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        verify.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        verify.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(52, 52, 52))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(110, 110, 110)
                .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, 134, Short.MAX_VALUE)
                .addGap(118, 118, 118))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(verify, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(133, 133, 133)
                        .addComponent(PinField, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(48, 48, 48)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(42, 42, 42)
                .addComponent(PinField, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(35, 35, 35)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40)
                .addComponent(verify, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(98, 98, 98))
        );

        jLabel2.setFont(new java.awt.Font("Tahoma", 2, 24)); // NOI18N
        jLabel2.setText("Choose your transaction ");

        depositButton.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        depositButton.setText("Deposit");
        depositButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                depositButtonActionPerformed(evt);
            }
        });

        topupButton.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        topupButton.setText("TopUp");
        topupButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                topupButtonActionPerformed(evt);
            }
        });

        withdrawButton.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        withdrawButton.setText("Withdrawal");
        withdrawButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                withdrawButtonActionPerformed(evt);
            }
        });

        purchaseButton.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        purchaseButton.setText("Purchase");
        purchaseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                purchaseButtonActionPerformed(evt);
            }
        });

        transferButton.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        transferButton.setText("Transfer");

        collectButton.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        collectButton.setText("Collect");
        collectButton.setActionCommand("Collect");

        wireButton.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        wireButton.setText("Wire");

        payButton.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        payButton.setText("Pay-Friend");

        from.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        from.setText("FROM:");

        money.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        money.setText("AMOUNT:");

        to.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        to.setText("TO:");

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel6.setText("ACCOUNT HOLDER: ");

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel7.setText("Enter date:");

        custName.setFont(new java.awt.Font("Tahoma", 2, 18)); // NOI18N
        custName.setText("jLabel8");

        status.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        status.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        status.setText("status\n");

        fromAcc.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        toAcc.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        amount.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        amount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                amountActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(custName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(199, 199, 199))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(date, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(131, 131, 131)
                .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(124, 124, 124))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(depositButton)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(transferButton)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(topupButton)
                            .addComponent(collectButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(from)
                            .addComponent(to)
                            .addComponent(money))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(fromAcc, 0, 93, Short.MAX_VALUE)
                            .addComponent(toAcc)
                            .addComponent(amount))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(wireButton)
                        .addGap(18, 18, 18)
                        .addComponent(payButton))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(withdrawButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(purchaseButton))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(status, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(189, 189, 189)))
                .addGap(8, 8, 8))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(custName))
                        .addGap(31, 31, 31)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7)
                            .addComponent(date, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(41, 41, 41)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(topupButton)
                            .addComponent(depositButton)
                            .addComponent(withdrawButton)
                            .addComponent(purchaseButton))
                        .addGap(26, 26, 26)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(transferButton)
                            .addComponent(collectButton)
                            .addComponent(wireButton)
                            .addComponent(payButton))
                        .addGap(32, 32, 32)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(from)
                            .addComponent(fromAcc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(25, 25, 25)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(toAcc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(to))
                        .addGap(33, 57, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(amount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(money, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                .addComponent(status)
                .addGap(39, 39, 39))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

                dispose();
                new BankForm().setVisible(true);
            
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        char[] pin = PinField.getPassword();
        String pass = "";
        for( char x: pin){
            pass +=x;
        }
        
        try{ 
            
            conn = bank.getConnection();
            String qry = "SELECT c.taxID from Customers c where c.PIN = '" + pass + "'";
	        Statement stmt = conn.createStatement();
	        ResultSet rs = stmt.executeQuery(qry);
           if(rs.next()){
               verify.setText("Verification successful");
               id = rs.getString("taxID");
	        	
	        	// find all OPEN accounts associated with this person
	        	accounts = new HashMap<Integer, Account>();
				qry = "SELECT DISTINCT a.aid, a.interest, a.balance, a.open, a.type FROM Accounts a, Owners o"
						+ " WHERE o.taxID = '" + id + "'"
						+ " AND a.aid = o.aid"
						+ " AND a.Open = '1'";
				ResultSet accts = stmt.executeQuery(qry);
				
				while(accts.next()){
					//Retrieve by column name
					int aid  = accts.getInt("aid");
					
					//Add to list of accounts for this customer
					accounts.put(aid, Account.getAccount(conn, aid));
				}
				accts.close();
				
				// Enter linked accounts into linked map
				linked = new HashMap<Integer, Integer>();
				for (Map.Entry<Integer, Account> a: accounts.entrySet()) {
					if (a.getValue().type.equals("Pocket")) {
						stmt = conn.createStatement();
						qry = "SELECT * from LinkedPockets p where p.pid = " + a.getKey();
						rs = stmt.executeQuery(qry);
						if (rs.next()) {
							linked.put(rs.getInt("pid"), rs.getInt("aid"));
						}
					}
				}     
                                
			        String dateInput = date.getText();
			        if (null != dateInput && dateInput.trim().length() > 0){
			            day = dateInput;
			        } else {
			        	
			        	day = "12-01-20";
			        }
                                
                                printAccounts();
                                                    
           }
           
           else {
            verify.setText("Incorrect PIN");
           }
            
            
        }catch(Exception e){
			e.printStackTrace();
			status.setText("error");
			System.exit(0);
			}
       
    }//GEN-LAST:event_jButton2ActionPerformed
    private int chooseAccount() {
		try {
		
                    
           
			int aid = 0;
			try {
         
				aid = Integer.parseInt(toAcc.getText());
			} catch (NumberFormatException e) {
				e.printStackTrace();
				status.setText("Not a number");
			}
			
			if (accounts.containsKey(aid)) {
				return aid;
			}
		} catch(Exception e){
			e.printStackTrace();
			status.setText("Error accessing accounts");
		}
		return 0;
	}
    private void printAccounts() {
        
 
        for (Map.Entry<Integer, Account> a: accounts.entrySet()) {
                    
            fromAcc.addItem(a.getKey().toString());
	}
    }
    private void depositButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_depositButtonActionPerformed
        // TODO add your handling code here:
        try {
			// Ask user for account they want to transact on
			int count = 0;
			int aid = 0;
			Account a = new Account();
			while (count < 3) {
				aid = chooseAccount();
				if (aid == 0) {
					status.setText("Error when choosing account to deposit to.");
					return;
				}
				// Pull account, place in Account object, check if its savings or checkings
				a = accounts.get(aid);
				if (a.type.equals("Savings") || a.type.equals("Student-Checking") || a.type.equals("Interest-Checking")) break;
				status.setText("Please choose only Savings or Checkings.");
				count += 1;
			}
			if (count > 2) {
				status.setText("Failed to choose valid account.");
				return;
			}
                        double amt = 0;
			try {
				amt = Double.parseDouble(amount.getText());
			} catch (NumberFormatException e) {
				e.printStackTrace();
				status.setText("Not a number");
			}
			
			if (amt < 0) {
				status.setText("Cannot deposit negative amount.");
				return;
			}
			
			a.balance += amt;
			// Update this in the DB using account object.
			if (a.updateAccountDB(conn)) {
				status.setText("Deposit successful.");
				//printAccounts();
				// Add transaction.
				if (Transaction.createDeposit(conn, day, amt, aid, id)) {
					status.setText("Transaction recorded.");
				} else {
					status.setText("Bad behavior - Error recording deposit transaction.");
				}
			} 
		} catch(Exception e){
			e.printStackTrace();
			status.setText("Error depositing into account");
		}
                        
    }//GEN-LAST:event_depositButtonActionPerformed

    
    private void amountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_amountActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_amountActionPerformed

    private void withdrawButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_withdrawButtonActionPerformed
        // TODO add your handling code here:
        try {
			// Ask user for account they want to transact on
			int count = 0;
			int aid = 0;
			Account a = new Account();
			while (count < 3) {
				aid = chooseAccount();
				if (aid == 0) {
					status.setText("Error when choosing account to withdraw from.");
					return;
				}
				// Pull account, place in Account object, check if its savings or checkings
				a = accounts.get(aid);
				if (a.type.equals("Savings") || a.type.equals("Student-Checking") || a.type.equals("Interest-Checking")) break;
				status.setText("Please choose only Savings or Checkings.");
				count += 1;
			}
			if (count > 2) {
				status.setText("Failed to choose valid account.");
				return;
			}
			
			int amt = 0;
			try {
				amt = Integer.parseInt(amount.getText());
			} catch (NumberFormatException e) {
				e.printStackTrace();
				status.setText("Not a number");
			}
			
			if (amt < 0) {
				status.setText("Cannot withdraw negative amount.");
				return;
			}
			if (amt > a.balance) {
				status.setText("Insufficient funds.");
				return;
			}
			
			a.balance -= amt;
			// Update this in the DB using account object.
			if (a.updateAccountDB(conn)) {
				status.setText("Withdrawal successful.");
				printAccounts();
				if (Transaction.createWithdraw(conn, day, amt, aid, id)) {
					status.setText("Transaction recorded.");
				} else {
					status.setText("Bad behavior - Error recording withdraw transaction.");
				}
			} 
		} catch(Exception e){
			e.printStackTrace();
			status.setText("Error withdrawing from account");
		}
       
    }//GEN-LAST:event_withdrawButtonActionPerformed

    private void purchaseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_purchaseButtonActionPerformed
        // TODO add your handling code here:
        try {
			// Ask user for account they want to transact on
			int count = 0;
			int pid = 0;
			Account pa = new Account();
			while (count < 3) {
				pid = chooseAccount();
				if (pid == 0) {
					status.setText("Error when choosing account to purchase from.");
					return;
				}
				
				pa = accounts.get(pid);
				if (pa.type.equals("Pocket")) break;
				status.setText("Please choose only a pocket account.");
				count += 1;
			}
			if (count > 2) {
				status.setText("Failed to choose valid account.");
				return;
			}
			
			
			int amt = 0;
			try {
				amt = Integer.parseInt(amount.getText());
			} catch (NumberFormatException e) {
				e.printStackTrace();
				status.setText("Not a number");
			}
			
			if (amt < 0) {
				status.setText("Cannot purchase a negative amount.");
				return;
			}
			if (amt > pa.balance) {
				status.setText("Insufficient funds for this purchase.");
				return;
			}
			
			pa.balance -= amt;
			
			// Update this in the DB using account object.
			if (pa.updateAccountDB(conn)) {
				status.setText("Purchase successful.");
				printAccounts();
				if (Transaction.createPurchase(conn, day, amt, pid, id)) {
					status.setText("Transaction recorded.");
				} else {
					status.setText("Bad behavior - Error recording purchase transaction.");
				}
			} 
			
		} catch(Exception e){
			e.printStackTrace();
			status.setText("Error using account to purchase");
		}
	
    }//GEN-LAST:event_purchaseButtonActionPerformed

    private void topupButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_topupButtonActionPerformed
        // TODO add your handling code here:
        try {
			// Ask user for account they want to transact on
			int count = 0;
			int pid = 0;
			Account pa = new Account();
			while (count < 3) {
				pid = chooseAccount();
				if (pid == 0) {
					status.setText("Error when choosing account to topup.");
					return;
				}
				
				pa = accounts.get(pid);
				if (pa.type.equals("Pocket")) break;
				status.setText("Please choose only a pocket account.");
				count += 1;
			}
			if (count > 2) {
				status.setText("Failed to choose valid account.");
				return;
			}
			
			// find the linked Saving/Checking acct
			int link = linked.get(pid);
			Account la = accounts.get(link);
			
		
			int amt = 0;
			try {
				amt = Integer.parseInt(amount.getText());
			} catch (NumberFormatException e) {
				e.printStackTrace();
				status.setText("Not a number");
			}
			
			if (amt < 0) {
				status.setText("Cannot topup negative amount.");
				return;
			}
			if (amt > la.balance) {
				status.setText("Insufficient funds.");
				return;
			}
			
			pa.balance += amt;
			la.balance -= amt;
			
			// Update this in the DB using account object.
			if (pa.updateAccountDB(conn) && la.updateAccountDB(conn)) {
				status.setText("Top up successful.");
				printAccounts();
				if (Transaction.createTopUp(conn, day, amt, pid, id)) {
					status.setText("Transaction recorded.");
				} else {
					status.setText("Bad behavior - Error recording TopUp transaction.");
				}
			} 
			
		} catch(Exception e){
			e.printStackTrace();
			status.setText("Error topping up account");
		}
    }//GEN-LAST:event_topupButtonActionPerformed
   
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(atmInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(atmInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(atmInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(atmInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new atmInterface().setVisible(true);
            }
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPasswordField PinField;
    private javax.swing.JTextField amount;
    private javax.swing.JButton collectButton;
    private javax.swing.JLabel custName;
    private javax.swing.JTextField date;
    private javax.swing.JButton depositButton;
    private javax.swing.JLabel from;
    private javax.swing.JComboBox<String> fromAcc;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JLabel money;
    private javax.swing.JButton payButton;
    private javax.swing.JButton purchaseButton;
    private javax.swing.JLabel status;
    private javax.swing.JLabel to;
    private javax.swing.JTextField toAcc;
    private javax.swing.JButton topupButton;
    private javax.swing.JButton transferButton;
    private javax.swing.JLabel verify;
    private javax.swing.JButton wireButton;
    private javax.swing.JButton withdrawButton;
    // End of variables declaration//GEN-END:variables

    private String encrypt(String pass) {
        try{
            java.security.MessageDigest md = java.security.MessageDigest.getInstance("MD5");
            byte[] array = md.digest(pass.getBytes());
            StringBuffer sb = new StringBuffer();
            for(int i = 0; i <array.length; i++){
                sb.append(Integer.toHexString((array[i] & 0xFF) | 0x100).substring(1,3));
            }
            return sb.toString();
        }catch(java.security.NoSuchAlgorithmException e){}
        return null;
         //To change body of generated methods, choose Tools | Templates.
    }
}
